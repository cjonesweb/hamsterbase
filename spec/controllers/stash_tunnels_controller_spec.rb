require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StashTunnelsController do

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:loginuser]
    user = FactoryGirl.create(:loginuser)
    sign_in user
  end


  # This should return the minimal set of attributes required to create a valid
  # StashTunnel. As you add validations to StashTunnel, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StashTunnelsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all stash_tunnels as @stash_tunnels" do
      stash_tunnel = FactoryGirl.create(:stash_tunnel)
      get :index, {}
      assigns(:stash_tunnels).should eq([stash_tunnel])
    end
  end

  describe "GET show" do
    it "assigns the requested stash_tunnel as @stash_tunnel" do
      stash_tunnel = FactoryGirl.create(:stash_tunnel)
      get :show, {:id => stash_tunnel.to_param}
      assigns(:stash_tunnel).should eq(stash_tunnel)
    end
  end

  describe "GET new" do
    it "assigns a new stash_tunnel as @stash_tunnel" do
      get :new, {}
      assigns(:stash_tunnel).should be_a_new(StashTunnel)
    end
  end

  describe "GET edit" do
    it "assigns the requested stash_tunnel as @stash_tunnel" do
      stash_tunnel = FactoryGirl.create(:stash_tunnel)
      get :edit, {:id => stash_tunnel.to_param}
      assigns(:stash_tunnel).should eq(stash_tunnel)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new StashTunnel" do
        expect {
          stash_tunnel = FactoryGirl.create(:stash_tunnel)
        }.to change(StashTunnel, :count).by(1)
      end

      it "assigns a newly created stash_tunnel as @stash_tunnel" do
        stash_tunnel = FactoryGirl.create(:stash_tunnel)
        post :create
        assigns(:stash_tunnel).should be_a(StashTunnel)
        assigns(:stash_tunnel).should be_persisted
      end

      it "redirects to the created stash_tunnel" do
        stash_tunnel = FactoryGirl.create(:stash_tunnel)
        post :create
        response.should redirect_to(StashTunnel.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved stash_tunnel as @stash_tunnel" do
        stash_tunnel = FactoryGirl.create(:stash_tunnel)
        # Trigger the behavior that occurs when invalid params are submitted
        StashTunnel.any_instance.expects(:save).returns(false)
        post :create, {:stash_tunnel => { }}
        assigns(:stash_tunnel).should be_a_new(StashTunnel)
      end

      it "re-renders the 'new' template" do
        stash_tunnel = FactoryGirl.create(:stash_tunnel)
        # Trigger the behavior that occurs when invalid params are submitted
        StashTunnel.any_instance.expects(:save).returns(false)
        post :create, {:stash_tunnel => {  }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested stash_tunnel" do
        stash_tunnel = FactoryGirl.create(:stash_tunnel)
        # Assuming there are no other stash_tunnels in the database, this
        # specifies that the StashTunnel created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        StashTunnel.any_instance.expects(:update_attributes).with({ "stash_id" => "1" })
        put :update, {:id => stash_tunnel.to_param, :stash_tunnel => { "stash_id" => "1" }}
      end

      it "assigns the requested stash_tunnel as @stash_tunnel" do
        stash_tunnel = FactoryGirl.create(:stash_tunnel)
        put :update, {:id => stash_tunnel.to_param, :stash_tunnel => valid_attributes}
        assigns(:stash_tunnel).should eq(stash_tunnel)
      end

      it "redirects to the stash_tunnel" do
        stash_tunnel = FactoryGirl.create(:stash_tunnel)
        put :update, {:id => stash_tunnel.to_param, :stash_tunnel => valid_attributes}
        response.should redirect_to(stash_tunnel)
      end
    end

    describe "with invalid params" do
      it "assigns the stash_tunnel as @stash_tunnel" do
        stash_tunnel = FactoryGirl.create(:stash_tunnel)
        # Trigger the behavior that occurs when invalid params are submitted
        StashTunnel.any_instance.expects(:save).returns(false)
        put :update, {:id => stash_tunnel.to_param, :stash_tunnel => { "stash_id" => "invalid value" }}
        assigns(:stash_tunnel).should eq(stash_tunnel)
      end

      it "re-renders the 'edit' template" do
        stash_tunnel = FactoryGirl.create(:stash_tunnel)
        # Trigger the behavior that occurs when invalid params are submitted
        StashTunnel.any_instance.expects(:save).returns(false)
        put :update, {:id => stash_tunnel.to_param, :stash_tunnel => { "stash_id" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested stash_tunnel" do
      stash_tunnel = FactoryGirl.create(:stash_tunnel)
      expect {
        delete :destroy, {:id => stash_tunnel.to_param}
      }.to change(StashTunnel, :count).by(-1)
    end

    it "redirects to the stash_tunnels list" do
      stash_tunnel = FactoryGirl.create(:stash_tunnel)
      delete :destroy, {:id => stash_tunnel.to_param}
      response.should redirect_to(stash_tunnels_url)
    end
  end

end
