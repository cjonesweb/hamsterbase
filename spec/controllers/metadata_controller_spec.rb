require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MetadataController do

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:loginuser]
    user = FactoryGirl.create(:loginuser)
    sign_in user
  end

  # This should return the minimal set of attributes required to create a valid
  # Metadatum. As you add validations to Metadatum, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MetadataController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all metadata as @metadata" do
      metadatum = FactoryGirl.create(:metadata)
      get :index, {}
      assigns(:metadata).should eq([metadatum])
    end
  end

  describe "GET show" do
    it "assigns the requested metadatum as @metadatum" do
      metadatum = FactoryGirl.create(:metadata)
      get :show, {:id => metadatum.to_param}
      assigns(:metadatum).should eq(metadatum)
    end
  end

  describe "GET new" do
    it "assigns a new metadatum as @metadatum" do
      get :new, {}
      assigns(:metadatum).should be_a_new(Metadatum)
    end
    
    it "assigns all stashes for editing purposes" do
      stash = FactoryGirl.create(:stash)
      get :new, {}
      assigns(:stashes_unpaged).should eq [stash]
    end 
    
  end

  describe "GET edit" do
    it "assigns the requested metadatum as @metadatum" do
      metadatum = FactoryGirl.create(:metadata)
      get :edit, {:id => metadatum.to_param}
      assigns(:metadatum).should eq(metadatum)
    end
    
    it "assigns all stashes for editing purposes" do
      stash = FactoryGirl.create(:stash)
      metadatum = FactoryGirl.create(:metadata)
      get :edit, {:id => metadatum.to_param}
      assigns(:stashes_unpaged).should eq [stash]
    end
    
    it "detects if the request to edit came from a stash page and sets an instance variable" do
      stash = FactoryGirl.create(:stash)
      metadatum = FactoryGirl.create(:metadata)
      get :edit, {:id => metadatum.to_param, :came_from_stash => "TRUE"}
      assigns(:came_from_stash).should eq TRUE
    end
      
    
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Metadatum" do
        expect {
          metadatum = FactoryGirl.create(:metadata)
        }.to change(Metadatum, :count).by(1)
      end

      it "assigns a newly created metadatum as @metadatum" do
        post :create, :metadatum => FactoryGirl.attributes_for(:metadata)
        assigns(:metadatum).should be_a(Metadatum)
        assigns(:metadatum).should be_persisted
      end

      it "redirects to the created metadatum" do
        post :create, :metadatum => FactoryGirl.attributes_for(:metadata)
        response.should redirect_to(Metadatum.last)
      end
      
      it "redirects to the stash if the came from stash parameter is set" do
        @Stash = FactoryGirl.create(:stash)
        metadata = FactoryGirl.attributes_for(:metadata, overrides = {:stash_id => @Stash.id})
        post :create, :metadatum => metadata, :came_from_stash => "TRUE"
        response.should redirect_to("/stashes/#{@Stash.id}")
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved metadatum as @metadatum" do
        metadatum = FactoryGirl.create(:metadata)
        # Trigger the behavior that occurs when invalid params are submitted
        Metadatum.any_instance.expects(:save).returns(false)
        post :create, {:metadatum => { "stash_id" => "invalid value" }}
        assigns(:metadatum).should be_a_new(Metadatum)
      end

      it "re-renders the 'new' template" do
        metadatum = FactoryGirl.create(:metadata)
        # Trigger the behavior that occurs when invalid params are submitted
        Metadatum.any_instance.expects(:save).returns(false)
        post :create, {:metadatum => { "stash_id" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested metadatum" do
        metadatum = FactoryGirl.create(:metadata)
        # Assuming there are no other metadata in the database, this
        # specifies that the Metadatum created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Metadatum.any_instance.expects(:update_attributes).with({ "stash_id" => "1" })
        put :update, {:id => metadatum.to_param, :metadatum => { "stash_id" => "1" }}
      end

      it "assigns the requested metadatum as @metadatum" do
        metadatum = FactoryGirl.create(:metadata)
        put :update, {:id => metadatum.to_param, :metadatum => valid_attributes}
        assigns(:metadatum).should eq(metadatum)
      end

      it "redirects to the metadatum" do
        metadatum = FactoryGirl.create(:metadata)
        put :update, {:id => metadatum.to_param, :metadatum => valid_attributes}
        response.should redirect_to(metadatum)
      end
      
      it "redirects to the stash if the came from stash parameter is set" do
        @Stash = FactoryGirl.create(:stash)
        metadatum = FactoryGirl.create(:metadata, :stash_id => @Stash.id)
        #puts "Test metadatum.inspect #{metadatum.inspect}"
        put :update, :id => metadatum.to_param, :metadatum => FactoryGirl.attributes_for(:metadata, :stash_id => @Stash.id), :came_from_stash => "TRUE"
        response.should redirect_to("/stashes/#{@Stash.id}")
      end
      
    end

    describe "with invalid params" do
      it "assigns the metadatum as @metadatum" do
        metadatum = FactoryGirl.create(:metadata)
        # Trigger the behavior that occurs when invalid params are submitted
        Metadatum.any_instance.expects(:save).returns(false)
        put :update, {:id => metadatum.to_param, :metadatum => { "stash_id" => "invalid value" }}
        assigns(:metadatum).should eq(metadatum)
      end

      it "re-renders the 'edit' template" do
        metadatum = FactoryGirl.create(:metadata)
        # Trigger the behavior that occurs when invalid params are submitted
        Metadatum.any_instance.expects(:save).returns(false)
        put :update, {:id => metadatum.to_param, :metadatum => { "stash_id" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested metadatum" do
      metadatum = FactoryGirl.create(:metadata)
      expect {
        delete :destroy, {:id => metadatum.to_param}
      }.to change(Metadatum, :count).by(-1)
    end

    it "redirects to the metadata list" do
      metadatum = FactoryGirl.create(:metadata)
      delete :destroy, {:id => metadatum.to_param}
      response.should redirect_to(metadata_url)
    end
    
    ## The standard link to delete Rails generator creates doesn't allow you to pass in params, so
    ## you've got to use the modelname_path(model, :parameter => "content") format to get this to work
    it "redirects to the stash if the came from stash parameter is set" do
      @Stash = FactoryGirl.create(:stash)
      metadata = FactoryGirl.create(:metadata, :stash_id => @Stash.id)
      delete :destroy, {:id => metadata.to_param, :came_from_stash => "TRUE"}
      response.should redirect_to("/stashes/#{@Stash.id}")
    end
    
    
  end

end
