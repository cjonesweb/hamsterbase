require 'spec_helper'


# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StashesController do

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:loginuser]
    user = FactoryGirl.create(:loginuser)
    sign_in user
  end


  # This should return the minimal set of attributes required to create a valid
  # Stash. As you add validations to Stash, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StashesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all stashes as @stashes" do
      stash = FactoryGirl.create(:stash)
      get :index
      assigns(:stashes).should eq([stash])
    end
    
    #it "lists all parentless stashes as root stashes" do
    #  stash = FactoryGirl.create(:parent_stash)
    #  get :index
    #  assigns(:parent_stashes).should eq([stash])
    #end
    
    
  end

  describe "GET show" do
    it "assigns the requested stash as @stash" do
      stash = FactoryGirl.create(:parent_stash)
      stash.children.create(FactoryGirl.attributes_for(:stash))
      get :show, {:id => stash.to_param}
      assigns(:stash).should eq(stash)
      assigns(:stash_children).should eq(stash.children)
    end

    it "lists all stashes for editing purposes" do
        
        stash = FactoryGirl.create(:stash)
        stasha = FactoryGirl.create(:stash)
        stashb = FactoryGirl.create(:stash)
        get :show, {:id => stash.to_param}
        assigns(:stashes_unpaged).should eq([stash, stasha, stashb])
        
    end
    
    it "lists all metadata associated with a given stash" do
      stash = FactoryGirl.create(:stash)
      metadata = FactoryGirl.create(:metadata)
      stash.metadata << metadata
      
      ## minitest... probably not necessary or belongs in the model spec
      stash.metadata.should eq [metadata]
      
      get :show, {:id => stash.to_param}
      assigns(:metadata).should eq [metadata]
    end

    it "lists all parent comments associated with a given stash" do
       stash = FactoryGirl.create(:stash)
       comment = FactoryGirl.create(:comment)
       stash.comments << comment

       ## minitest... probably not necessary or belongs in the model spec
       stash.comments.should eq [comment]
       
       get :show, {:id => stash.to_param}
       assigns(:comments).should eq [comment]
    end
    
    it "should not assign any child comments" do
      stash = FactoryGirl.create(:stash)
      parent_comment = FactoryGirl.create(:parent_comment)
      child_comment = FactoryGirl.create(:child_comment)
      parent_comment.children << child_comment
      stash.comments << parent_comment
      stash.comments << child_comment
      
      get :show, {:id => stash.to_param}
      assigns(:comments).should eq [parent_comment]
    end

  end

  describe "GET new" do
    it "assigns a new stash as @stash" do
      get :new
      assigns(:stash).should be_a_new(Stash)
    end
    
    it "attempts to look up a parent if a parent id is passed in" do
      parent_stash = FactoryGirl.create(:parent_stash)
      get :new, :parent_id => parent_stash.id.to_s
      assigns(:parent_stash).should eq(parent_stash)
    end
  end

  describe "GET edit" do
    it "assigns the requested stash as @stash" do
      stash = FactoryGirl.create(:stash)
      get :edit, {:id => stash.to_param}
      assigns(:stash).should eq(stash)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Stash" do
        expect {
        stash = FactoryGirl.create(:stash)
        }.to change(Stash, :count).by(1)
      end

      it "assigns a newly created stash as @stash" do
        post :create, :stash => FactoryGirl.attributes_for(:stash)
        assigns(:stash).should be_a(Stash)
        assigns(:stash).should be_persisted
      end

      it "redirects to the created stash" do
        post :create, :stash => FactoryGirl.attributes_for(:stash)
        response.should redirect_to(Stash.last)
      end
      
      it "creates a child stash if a parent id is passed in" do
        @parent_stash = FactoryGirl.create(:stash)
        post :create, :stash => FactoryGirl.attributes_for(:stash), :parent_id => @parent_stash.id
        assigns(:stash).parent_id.should eq @parent_stash.id        
      end
      
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved stash as @stash" do
        # Trigger the behavior that occurs when invalid params are submitted
        Stash.any_instance.expects(:save).returns(false)
        post :create, {:stash => {}}
        assigns(:stash).should be_a_new(Stash)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Stash.any_instance.expects(:save).returns(false)
        post :create, {:stash => { }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested stash" do
        stash = FactoryGirl.create(:stash)
        # Assuming there are no other stashes in the database, this
        # specifies that the Stash created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Stash.any_instance.expects(:update_attributes).with({ "title" => "MyString" })
        put :update, {:id => stash.to_param, :stash => { "title" => "MyString" }}
      end

      it "assigns the requested stash as @stash" do
        stash = FactoryGirl.create(:stash)
        put :update, {:id => stash.to_param, :stash => valid_attributes}
        assigns(:stash).should eq(stash)
      end

      it "redirects to the stash" do
        stash = FactoryGirl.create(:stash)
        put :update, {:id => stash.to_param, :stash => valid_attributes}
        response.should redirect_to(stash)
      end
    end

    describe "with invalid params" do
      it "assigns the stash as @stash" do
        stash = FactoryGirl.create(:stash)
        # Trigger the behavior that occurs when invalid params are submitted
        Stash.any_instance.expects(:save).returns(false)
        put :update, {:id => stash.to_param, :stash => { }}
        assigns(:stash).should eq(stash)
      end

      it "re-renders the 'edit' template" do
        stash = FactoryGirl.create(:stash)
        # Trigger the behavior that occurs when invalid params are submitted
        Stash.any_instance.expects(:save).returns(false)
        put :update, {:id => stash.to_param, :stash => { }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested stash" do
      stash = FactoryGirl.create(:stash)
      expect {
        delete :destroy, {:id => stash.to_param}
      }.to change(Stash, :count).by(-1)
    end

    it "redirects to the stashes list" do
      stash = FactoryGirl.create(:stash)
      delete :destroy, {:id => stash.to_param}
      response.should redirect_to(stashes_url)
    end
  end

end
